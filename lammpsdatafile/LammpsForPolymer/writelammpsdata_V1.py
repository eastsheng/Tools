# write lammps data from the modified pdb file
import numpy as np
import time
# np.set_printoptions(suppress=True)
np.set_printoptions(threshold=100000000)

localtime = time.asctime(time.localtime(time.time()))

#read atom type from pdb file
def readAtomtype(pdbfile):
	with open(pdbfile,'r') as pdb:
		atom_style_list = []
		for index, line in enumerate(pdb,1):
			line_ss = line.strip().split()
			l_line = len(line_ss)
			if l_line>11:
				atom_style_list.append(line_ss[11])
			elif l_line>8 and l_line<=11:
				atom_style_list.append(line_ss[10])
	return atom_style_list

# write lammps header
def writeheader(lammpsvmddata,outlammpsfile):
	with open(lammpsvmddata,'r') as vmd,\
		open(outlammpsfile,'w') as lammps:
		lammps.write('LAMMPS data file of full atom_style generated by Chen on '
			+localtime+'\n')
		for index, line in enumerate(vmd,1):
			if index>1 and index<15:
				lammps.write(line)
		lammps.write('\nMasses\n\n')
		lammps.write('Pair Coeffs # lj/cut/coul/long\n\n')
		lammps.write('Bond Coeffs # harmonic\n\n')
		lammps.write('Angle Coeffs # harmonic\n\n')
		lammps.write('Dihedral Coeffs # opls\n\n')
		lammps.write('Atoms # full\n\n')
	return

# write lammps position info
def writedata(lammpsvmddata,outlammpsfile,atom_style_list):
	list_data = []
	with open(lammpsvmddata,'r') as vmd,\
	open(outlammpsfile,'a') as lammps:
		for index, line in enumerate(vmd,1):
			# print(line)
			line_ss = line.strip().split()
			l_line = len(line_ss)
			if l_line==10:
				# print(line_ss)
				list_data.append(line_ss)

		data_array = np.array(list_data)
		len_data = len(data_array)
		atom_style_array = np.array(atom_style_list).reshape(len_data,1)
		# print(data_array.shape,atom_style_array.shape)
		atom_type = np.unique(atom_style_array)
		atom_type = atom_type.reshape(len(atom_type),1)

		position_info = np.hstack((data_array,atom_style_array))
		# print(position_info)

		m,n = position_info.shape
		x,y = atom_type.shape
		print(x)
		for i in range(m):
			for j in range(x):
				if position_info[i,10] == atom_type[j,0]:
					position_info[i,2] = j+1
			# if position_info[i,10] == 'C10':
			# 	position_info[i,2] = 1
			# elif position_info[i,10] == 'C11':
			# 	position_info[i,2] = 2
			# elif position_info[i,10] == 'C12':
			# 	position_info[i,2] = 3
			# elif position_info[i,10] == 'C13':
			# 	position_info[i,2] = 4
			# elif position_info[i,10] == 'C14':
			# 	position_info[i,2] = 5
			# elif position_info[i,10] == 'C15':
			# 	position_info[i,2] = 6
			# elif position_info[i,10] == 'C16':
			# 	position_info[i,2] = 7
			# elif position_info[i,10] == 'C20':
			# 	position_info[i,2] = 8
			# elif position_info[i,10] == 'C40':
			# 	position_info[i,2] = 9
			# elif position_info[i,10] == 'C41':
			# 	position_info[i,2] = 10
			# elif position_info[i,10] == 'C42':
			# 	position_info[i,2] = 11
			# elif position_info[i,10] == 'C43':
			# 	position_info[i,2] = 12
			# elif position_info[i,10] == 'Cu':
			# 	position_info[i,2] = 13
			# elif position_info[i,10] == 'F11':
			# 	position_info[i,2] = 14
			# elif position_info[i,10] == 'F13':
			# 	position_info[i,2] = 15
			# elif position_info[i,10] == 'F14':
			# 	position_info[i,2] = 16
			# elif position_info[i,10] == 'F15':
			# 	position_info[i,2] = 17
			# elif position_info[i,10] == 'F16':
			# 	position_info[i,2] = 18
			# elif position_info[i,10] == 'F20':
			# 	position_info[i,2] = 19
			# elif position_info[i,10] == 'H10':
			# 	position_info[i,2] = 20
			# elif position_info[i,10] == 'H12':
			# 	position_info[i,2] = 21
			# elif position_info[i,10] == 'H16':
			# 	position_info[i,2] = 22
			# elif position_info[i,10] == 'H41':
			# 	position_info[i,2] = 23
			# elif position_info[i,10] == 'H42':
			# 	position_info[i,2] = 24
			# elif position_info[i,10] == 'H43':
			# 	position_info[i,2] = 25
			# elif position_info[i,10] == 'N20':
			# 	position_info[i,2] = 26
			# elif position_info[i,10] == 'Na30':
			# 	position_info[i,2] = 27
			# elif position_info[i,10] == 'O20':
			# 	position_info[i,2] = 28
			# elif position_info[i,10] == 'O40':
			# 	position_info[i,2] = 29
			# elif position_info[i,10] == 'O41':
			# 	position_info[i,2] = 30
			# elif position_info[i,10] == 'S20':
			# 	position_info[i,2] = 31
			# else:
			# 	print('Your atom type is error!')
		# print(position_info)
		for i in range(m):
			for j in range(n):
				lammps.write(position_info[i,j]+'\t')
			lammps.write('\n')

	return 

# ---main program--- #
if __name__ == '__main__':
	# your pdb file from "packmol" tool
	atom_style_list = readAtomtype("ionmixture.pdb")
	# print(atom_style_list,len(atom_style_list))

	# first file is your lammpsdata from "vmd" tool by the command "topo writelammpsdata ionmixture_VMD.data";
	# second file is your final lammpsdata file 

	writeheader("ionmixture_VMD.data","ionmixture.data")
	writedata("ionmixture_VMD.data","ionmixture.data",atom_style_list)
	
	print("\n------Done!------\n")